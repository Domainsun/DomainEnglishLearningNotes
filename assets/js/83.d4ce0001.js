(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{391:function(t,a,n){"use strict";n.r(a);var s=n(14),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"go语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go语法"}},[t._v("#")]),t._v(" Go语法")]),t._v(" "),a("h2",{attrs:{id:"语法结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法结构"}},[t._v("#")]),t._v(" 语法结构")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("语句结束不需要分号，换行即表示语句结束。 一行就是一个语句， 如果同一行有多个语句才需要用分号，但一般不建议。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\tfmt.Println("Hello, World1") //语句结束不需要分号，换行即表示语句结束。\n\tfmt.Println("Hello, World2")\n')])])])]),t._v(" "),a("li",[a("p",[t._v("Go 追求简单的开发，不喜欢把语法弄复杂， 所以关键字只有以下25个")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("break")]),t._v(" "),a("th",[t._v("default")]),t._v(" "),a("th",[t._v("func")]),t._v(" "),a("th",[t._v("interface")]),t._v(" "),a("th",[t._v("select")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("case")]),t._v(" "),a("td",[t._v("defer")]),t._v(" "),a("td",[t._v("go")]),t._v(" "),a("td",[t._v("map")]),t._v(" "),a("td",[t._v("struct")])]),t._v(" "),a("tr",[a("td",[t._v("chan")]),t._v(" "),a("td",[t._v("else")]),t._v(" "),a("td",[t._v("goto")]),t._v(" "),a("td",[t._v("package")]),t._v(" "),a("td",[t._v("switch")])]),t._v(" "),a("tr",[a("td",[t._v("const")]),t._v(" "),a("td",[t._v("fallthrough")]),t._v(" "),a("td",[t._v("if")]),t._v(" "),a("td",[t._v("range")]),t._v(" "),a("td",[t._v("type")])]),t._v(" "),a("tr",[a("td",[t._v("continue")]),t._v(" "),a("td",[t._v("for")]),t._v(" "),a("td",[t._v("import")]),t._v(" "),a("td",[t._v("return")]),t._v(" "),a("td",[t._v("var")])])])])]),t._v(" "),a("li",[a("p",[t._v("Go 以严格的空格来分隔标识符、关键字、运算符和表达式， 如果写了多余的空格， idea 会自动去除。")]),t._v(" "),a("p",[t._v("（1）定义一个int类型的变量x等于10：关键字 变量 类型 赋值符号 值 , 他们之间都是通过一个空格分开， 有多余的空格是错误的，idea会自动去除。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tvar x int = 10\n")])])]),a("p",[t._v("（2）运算符之间也是严格的按照一个空格来分割")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\tvar s2 string = s1 + "domain"\n\tfmt.Println(s2)\n')])])]),a("p",[t._v("（3）表达式也是通过空格来分割")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\tif 2 > 0 {\n\t\tfmt.Println("大于")\n\t}\n')])])])]),t._v(" "),a("li",[a("p",[t._v("Go 追去简单，简洁，如果定义了变量或者方法，但却没有被使用，在编译的时候会报错，无法通过编译。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var x int = 10\n\n//编译时会报：\n./hello.go:12:6: x declared and not used\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("h3",{attrs:{id:"整型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整型"}},[t._v("#")]),t._v(" 整型")]),t._v(" "),a("p",[t._v("Go对整型的定义了很多种关键字表示，一般使用"),a("code",[t._v("int")]),t._v("就行。")]),t._v(" "),a("p",[a("code",[t._v("int")]),t._v("可表示的范围在32位操作系统上是-2147483648 到 2147483647。在64位操作系统上是-9223372036854775808 到 9223372036854775807。")]),t._v(" "),a("p",[t._v("其他的关键字分为两类， 一类是有符号类型，即可以表示正负数， 一类是无符号类型，即只能表示正数。")]),t._v(" "),a("p",[t._v("（1）有符号类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("符号")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("int8")]),t._v(" "),a("td",[t._v("有符号 8位整型 (-128 到 127)")])]),t._v(" "),a("tr",[a("td",[t._v("int16")]),t._v(" "),a("td",[t._v("有符号 16位整型 (-32768 到 32767)")])]),t._v(" "),a("tr",[a("td",[t._v("int32")]),t._v(" "),a("td",[t._v("有符号 32位整型 (-2147483648 到 2147483647)")])]),t._v(" "),a("tr",[a("td",[t._v("int64")]),t._v(" "),a("td",[t._v("有符号 64位整型 (-9223372036854775808 到 9223372036854775807)")])])])]),t._v(" "),a("p",[t._v("（2）无符号类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("符号")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("uint8")]),t._v(" "),a("td",[t._v("无符号 8位整型 (0 到 255)")])]),t._v(" "),a("tr",[a("td",[t._v("uint16")]),t._v(" "),a("td",[t._v("无符号 16位整型 (0 到 65535)")])]),t._v(" "),a("tr",[a("td",[t._v("uint32")]),t._v(" "),a("td",[t._v("无符号 32位整型 (0 到 4294967295)")])]),t._v(" "),a("tr",[a("td",[t._v("uint64")]),t._v(" "),a("td",[t._v("无符号 64位整型 (0 到 18446744073709551615)")])])])]),t._v(" "),a("h3",{attrs:{id:"浮点型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点型"}},[t._v("#")]),t._v(" 浮点型")]),t._v(" "),a("p",[t._v("浮点型有两种，一种是 "),a("code",[t._v("float32")]),t._v("和"),a("code",[t._v("float64")]),t._v("。一种是「复数」complex64和complex128。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tvar d1 float32 = math.Pi //7位小数\n\tvar d2 float64 = math.Pi //15位小数\n")])])]),a("h3",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("p",[t._v("定义字符串通过双引号"),a("code",[t._v('""')]),t._v(" 或者反引号``定义")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var str = "hello   12"\n\tvar str2 = `hello   \ndomain   ssss\nwelcome to the world.`\n')])])]),a("h3",{attrs:{id:"字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符"}},[t._v("#")]),t._v(" 字符")]),t._v(" "),a("p",[t._v("有两种类型，byte和rune。 byte只能表示ASCII码对应的字符。 rune可以表示一个Unicode字符。 两种类型的值输出都是一个int类型。 byte的取值范围和unit8类型一样， rune的取值范围和int32一样。")]),t._v(" "),a("h3",{attrs:{id:"布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[t._v("#")]),t._v(" 布尔值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tvar b1 bool = true\n\tfmt.Println(b1)\n")])])]),a("p",[t._v("以上都是Go的基本数据类型，除了基本数据类型，Go还有派生数据类型：")]),t._v(" "),a("ul",[a("li",[t._v("(a) 指针类型（Pointer）")]),t._v(" "),a("li",[t._v("(b) 数组类型")]),t._v(" "),a("li",[t._v("(c) 结构化类型(struct)")]),t._v(" "),a("li",[t._v("(d) Channel 类型")]),t._v(" "),a("li",[t._v("(e) 函数类型")]),t._v(" "),a("li",[t._v("(f) 切片类型")]),t._v(" "),a("li",[t._v("(g) 接口类型（interface）")]),t._v(" "),a("li",[t._v("(h) Map 类型")])]),t._v(" "),a("h2",{attrs:{id:"变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[t._v("#")]),t._v(" 变量声明")]),t._v(" "),a("h3",{attrs:{id:"声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明"}},[t._v("#")]),t._v(" 声明")]),t._v(" "),a("ol",[a("li",[t._v("一般通过"),a("code",[t._v("var")]),t._v("关键字来声明变量。")])]),t._v(" "),a("p",[t._v("以下声明了一个int类型的变量，且没给初始值。 声明的格式是："),a("code",[t._v("var 变量名 类型")]),t._v(" 。")]),t._v(" "),a("div",{staticClass:"language-var s int extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tvar s int\n\tfmt.Println(s)\n")])])]),a("p",[t._v("声明变量时如果没有给初始值， 会有默认值。 数字类型的默认值是0， 字符串类型的默认值是空字符串， 布尔类型的默认值是false。以下类型的默认值为"),a("code",[t._v("nil")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var a *int\nvar a []int\nvar a map[string] int\nvar a chan int\nvar a func(string) int\nvar a error // error 是接口\n")])])]),a("p",[t._v("声明一个变量并给初始值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\tvar s string = "domain"\n\tfmt.Println(s)\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("根据初始化的值自动判断类型，省略类型的表示。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\tvar s = "domain"\n\tvar d = 2.3\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("通过"),a("code",[t._v(":=")]),t._v("初始化变量时，省略"),a("code",[t._v("var")]),t._v(" 和类型。 注意：必须要第一次声明变量才可以这样用。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\ts := "domain" // 相当于 var s string = "domain"\n\tfmt.Println(s)\n')])])]),a("h3",{attrs:{id:"值类型和引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值类型和引用类型"}},[t._v("#")]),t._v(" 值类型和引用类型")]),t._v(" "),a("p",[t._v("int、float、bool 和 string 这些都是值类型， 在赋值的时候，比如以下的s1赋值给s2，i1复制给i2， 实际上都是拷贝了一份值， 然后指向不同的内存地址。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\ts1 := "domain"\n\ts2 := s1\n\ti1 := 7\n\ti2 := i1\n\n\tfmt.Println(&s1)\n\tfmt.Println(&s2)\n\n\tfmt.Println(&i1)\n\tfmt.Println(&i2)\n\t\n\t//以下是输出 \n\t//0xc000180120\n\t//0xc000180130\n\t//0xc00018e008\n\t//0xc00018e020\n\n')])])]),a("h2",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),a("p",[t._v("变量是不可变的量。 常量中的数据类型只可以是值类型。")]),t._v(" "),a("ol",[a("li",[t._v("常量通过 const 关键字定义")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const s string = "domain"\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("常量可以用来做枚举")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tconst (\n\t\tUnknown = 0\n\t\tFemale  = 1\n\t\tMale    = 2\n\t)\n\n\tfmt.Println(Unknown)\n\tfmt.Println(Female)\n")])])]),a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),a("p",[t._v("基本和Java一致，可参考"),a("a",{attrs:{href:"https://www.runoob.com/go/go-operators.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"条件判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件判断"}},[t._v("#")]),t._v(" 条件判断")]),t._v(" "),a("p",[t._v("和Java一样， 有"),a("code",[t._v("if")]),t._v("、"),a("code",[t._v("if else")]),t._v(" 、 "),a("code",[t._v("switch")]),t._v("。Go中的条件语句的中的括号"),a("code",[t._v("()")]),t._v("是不需要的。 "),a("code",[t._v("switch")]),t._v("中的"),a("code",[t._v("break")]),t._v("也是不需要的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\ta := 10\n\tb := 20\n\n\tif a > b {\n\t\tfmt.Println("大于")\n\t} else {\n\t\tfmt.Println("不大于")\n\t}\n\n\tswitch a {\n\tcase 10:\n\t\tfmt.Println("a  = 10")\n\t\tbreak\n\tcase 20:\n\t\tfmt.Println("a  = 10")\n\t\tbreak\n\tdefault:\n\t\tbreak\n\t}\n\n')])])]),a("h2",{attrs:{id:"遍历循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历循环"}},[t._v("#")]),t._v(" 遍历循环")]),t._v(" "),a("ol",[a("li",[t._v("普通循环")])]),t._v(" "),a("p",[t._v("和Java一样，也只是不写中括号而已。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tsum := 0\n\tfor i := 0; i <= 10; i++ {\n\t\tsum += i\n\t}\n\tfmt.Println(sum)\n")])])]),a("p",[t._v("初始化和自增运算可以不写， 这样相当于是java 的while语句。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tsum := 1\n\tfor sum <= 10 {\n\t\tsum += sum\n\t}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("死循环")])]),t._v(" "),a("p",[t._v("死循环的定义很简单， 如下:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tsum := 1\n\tfor {\n\t\tsum += 1\n\t\tfmt.Println(sum)\n\t}\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("遍历子元素")])]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("range")]),t._v("可遍历数据中的子元素")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t\n\tstrings := []string{"google", "domain"}\n\tfor i, s := range strings {\n\t\tfmt.Println(i, s)\n\t}\n\t\n\t\n\tmap1 := make(map[int]float32)\n\tmap1[1] = 1.0\n\tmap1[2] = 2.0\n\tmap1[3] = 3.0\n\tmap1[4] = 4.0\n\n\t// 读取 key 和 value\n\tfor key, value := range map1 {\n\t\tfmt.Printf("key is: %d - value is: %f\\n", key, value)\n\t}\n\t\n')])])]),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("h3",{attrs:{id:"定义一个函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义一个函数"}},[t._v("#")]),t._v(" 定义一个函数")]),t._v(" "),a("p",[t._v("定义了一个方法， 传入两个参数， 返回两个参数。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\nfunc say(name string, age int) (string, string) {\n    fmt.Printf("第一行 - c 的值为 %v %d \\n", name, age)\n    return "1", "2"\n}\n\n')])])]),a("h3",{attrs:{id:"函数可以做参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数可以做参数"}},[t._v("#")]),t._v(" 函数可以做参数")]),t._v(" "),a("p",[t._v("和JavaScript一样，函数可以作为一个变量，作为函数的参数传入")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func main() {\n\n\tsay(18, func(x int) int {\n\t\tfmt.Printf("i am %d years old. ", x)\n\t\treturn x\n\t})\n\n}\n\n// 声明一个函数类型\ntype cb func(int) int\n\nfunc say(x int, f cb) {\n\tf(x)\n}\n')])])]),a("h3",{attrs:{id:"值传递和引用传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值传递和引用传递"}},[t._v("#")]),t._v(" 值传递和引用传递")]),t._v(" "),a("p",[t._v("默认情况下， Go是值传递， 也就是对形参的操作不会影响到实参。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func main() {\n\tage := 18\n\tnewAge := say(age)\n\tprintln(age)    //输出18\n\tprintln(newAge) //输出20\n}\n\n// 定义了一个方法， 传入两个参数， 返回两个参数。\nfunc say(age int) int {\n\tage += 2\n\treturn age\n}\n")])])]),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\t//定义int 类型的数组并初始化\n\tage := [3]int{3, 15, 18}\n\t//获取数组中的元素\n\tprintln(age[1])\n\t//修改数组中的元素\n\tage[1] = 19\n\tprintln(age[1])\n")])])]),a("h2",{attrs:{id:"指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),a("p",[t._v("指针就是用来存储某个变量的内存地址，通过这个内存地址，能够获取和修改内存地址对应的值。修改这个值后， 指向这个内存地址的变量的值也会随之改变。通过符号 "),a("code",[t._v("*")]),t._v(" 来定义指针和获取修改指针中的值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 指针通过 * 来标识， *int 表示一个 int类型的指针\n\n//定义了一个int 类型的变量a， 值为20\nvar a int = 20\n//定义了一个 int 类型的指针\nvar ip *int\n\n//把a的内存地址赋值给上面定义的指针ip， ip存储的就是a的内存地址。\nip = &a\n\n//输出a的内存地址， 和指针ip的值， 是一样的\nfmt.Printf("a 变量的地址是: %x\\n", &a) // c00011c018\nfmt.Printf("ip 指针的值是: %x\\n", ip) // c00011c018\n\n//访问指针中的值，通过 *ip\nfmt.Printf("ip 变量的值: %d\\n", *ip)\n//修改指针中的值，\n*ip = 30\nfmt.Printf("指针修改值后\\n a = %d , *ip = %d", a, *ip) // 30\n\n\n')])])]),a("h2",{attrs:{id:"切片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切片"}},[t._v("#")]),t._v(" 切片")]),t._v(" "),a("p",[t._v("一个不固定数量的数组， 是对数组的抽象，可以理解是对数组的封装，内部是一个数组， 更改切片的值，会更改数组的值。更改切片类型的形参也会影响到实参和数组。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//切片\n\narr := [6]int{1, 2, 3, 4, 5, 6} //定义了一个数组\ns1 := arr[1:3]                  // 截取数组的1-3的值初始化一个切片s1,// 半开半闭， 所有语言都包括第一个下标， 不包括最后一个下标\ns2 := arr[:3]                   //可以不指定头，默认从头开始截取\ns3 := arr[1:]                   //可以不指定结尾， 默认到截取到最后\ns4 := arr[:]                    //头尾都不指定，截取全部\nfmt.Println(arr)\nfmt.Println(s1) //输出 [2 3]\n\nfmt.Println(s2) //[1 2 3]\nfmt.Println(s3) // [2 3 4 5 6]\nfmt.Println(s4) //[1 2 3 4 5 6]\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func printArr(s []int) {\n   fmt.Println("切片更改前的值：", s)\n   s[0] = 100\n}\n\nfunc main() {\n   //切片\n   arr := [6]int{1, 2, 3, 4, 5, 6} //定义了一个数组\n   s1 := arr[1:3]                  // 截取数组的1-3的值初始化一个切片s1,// 半开半闭， 所有语言都包括第一个下标， 不包括最后一个下标\n   printArr(s1)\n   fmt.Println("切片更改后的值：", s1)\n   fmt.Println("更改切片后数组的值：", s1)\n}\n\n//输出结果\n//切片更改前的值： [2 3]\n//切片更改后的值： [100 3]\n//更改切片后数组的值： [100 3]\n\n')])])]),a("h2",{attrs:{id:"range-遍历关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#range-遍历关键字"}},[t._v("#")]),t._v(" range 遍历关键字")]),t._v(" "),a("p",[t._v("range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//切片\n\tarr := [3]int{10, 20, 30} //定义了一个数组\n\n\t//遍历 key\n\tfmt.Println("遍历 key----")\n\n\tfor i := range arr {\n\t\tfmt.Println(i)\n\t}\n\tfmt.Println("遍历key,value----")\n\n\t//遍历key,value\n\tfor i, v := range arr {\n\t\tfmt.Println(i, v)\n\t}\n\tfmt.Println("不遍历key，只遍历value----")\n\n\t//不遍历key，只遍历value\n\tfor _, v := range arr {\n\t\tfmt.Println(v)\n\t}\n\t\n输出结果:\n遍历 key----\n0\n1\n2\n遍历key,value----\n0 10\n1 20\n2 30\n不遍历key，只遍历value----\n10\n20\n30\n\n')])])]),a("h2",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" map")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func main() {\n   //map , map，键值对存储， 无序\n   m := map[string]int{\n      "name": 123,\n      "age":  18,\n      "sex":  1,\n   }\n   fmt.Println(m)\n   //增\n   m["weight"] = 128\n   //删\n   delete(m, "sex")\n   //改\n   m["age"] = 20\n   //查\n   s := m["age"]\n   fmt.Println(s)\n   fmt.Println(m)\n}\n\n')])])]),a("p",[t._v("输出结果")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("map[age:18 name:123 sex:1]\n20\nmap[age:20 name:123 weight:128]\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);