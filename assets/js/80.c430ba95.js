(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{390:function(n,a,t){"use strict";t.r(a);var e=t(14),s=Object(e.a)({},(function(){var n=this,a=n._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[n._v("#")]),n._v(" JavaScript")]),n._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[n._v("#")]),n._v(" 参考资料")]),n._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/qq_45729665/article/details/107287163",target:"_blank",rel:"noopener noreferrer"}},[n._v("快速入门"),a("OutboundLink")],1)])]),n._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/lydon1314/article/details/118570380",target:"_blank",rel:"noopener noreferrer"}},[n._v("和Java语法区别"),a("OutboundLink")],1)])]),n._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/RookiexiaoMu_a/article/details/89052768",target:"_blank",rel:"noopener noreferrer"}},[n._v("和Java语法区别2"),a("OutboundLink")],1)])]),n._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.pythonav.com/wiki/detail/5/63/#4.1%20JavaScript",target:"_blank",rel:"noopener noreferrer"}},[n._v("武沛齐"),a("OutboundLink")],1)])]),n._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.runoob.com/js/js-class-intro.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("菜鸟教程"),a("OutboundLink")],1)])])]),n._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[n._v("#")]),n._v(" 简介")]),n._v(" "),a("p",[n._v("网景公司里面的两兄弟在两周时间开发的， 用来给网页增加动态的交互效果。")]),n._v(" "),a("p",[n._v("1995年面世。")]),n._v(" "),a("p",[n._v("1997年ECMA指定了第一套JavaScript标准，简称ES1，目前的最新标准是ES6。")]),n._v(" "),a("p",[n._v("解释型的弱类型语言。 执行在浏览器之上。")]),n._v(" "),a("h2",{attrs:{id:"变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[n._v("#")]),n._v(" 变量声明")]),n._v(" "),a("p",[n._v("通过"),a("code",[n._v("var")]),n._v("关键字声明局部变量，如果没有使用var则表示是全局变量。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<script>\n    var str1 = "hello1"; //定义一个全局变量\n    function a() {\n      var str2 = "hello2"; //定义一个局部变量\n      str3 = "hello3"; //定义一个全局变量\n    }\n<\/script>\n')])])]),a("h3",{attrs:{id:"重复声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重复声明"}},[n._v("#")]),n._v(" 重复声明")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("//重复声明， js中， 对同名的变量和方法重复声明， 后面的覆盖前面的。就算方法的参数不一致也会。\n\n//重复声明方法\nfunction f1(x) {\n    console.log('f1 1111' + x);\n}\n\nfunction f1(x, y) {\n    console.log('f1 222' + x);\n}\n\nf1(333);\n\n\n//重复声明变量\nvar a = '111'\nvar a = '222'\nconsole.log(a);\n")])])]),a("h3",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[n._v("#")]),n._v(" 数据类型")]),n._v(" "),a("p",[n._v("可以通过"),a("code",[n._v("typeof")]),n._v("方法查看数据的类型是什么。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var v1 = 123;\nvar v2 = 'domain'\nconsole.log('查看变量v1的数据类型:' + typeof (v1))\nconsole.log('查看变量v2的数据类型:' + typeof (v2))\n")])])]),a("p",[n._v("常见的数据类型有以下这些， 分为基础类型和引用类型。 数组和对象是引用类型。")]),n._v(" "),a("h4",{attrs:{id:"基础类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础类型"}},[n._v("#")]),n._v(" 基础类型")]),n._v(" "),a("ul",[a("li",[n._v("number\t\t数值型")]),n._v(" "),a("li",[n._v("boolean\t\t布尔类型：true/false")]),n._v(" "),a("li",[n._v("string\t\t字符串，没有字符类型")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 1. 字符串\n\nvar str1 = 'domain';\nvar str2 = \"domain2\";\nconsole.log(str1);\nconsole.log(str2);\n\n\n//2. 数字 \n// NaN，非数字。可使用 isNaN(num) 来判断。\n// Infinity，无穷大。可使用 isFinite(num) 来判断。\n// \nvar num = 1;\nvar num2 = 1.1;\nvar strnum = '2.2';\nvar nan = NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示\nvar infinity = Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity\n\n\n\nconsole.log('浮点转整型：' + parseInt(num2))\nconsole.log('字符串转整型：' + parseInt(strnum))\nconsole.log('nan:' + nan);\nconsole.log('infinity:' + infinity);\n\n//3. 布尔值\nvar b1 = true;\nvar b2 = 2 > 5;\nconsole.log(b1);\nconsole.log(b2);\n\n")])])]),a("ul",[a("li",[a("p",[n._v("null 和undefined")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 4. null 、undefined\n// null 表示空，undefined表示未定义\n// null 在转换为数字时会转换为0, undefined会转换为 Nan， 转换为布尔值时都会转换为false，\n// 通过 `==` 比较， null和undefined是相等的。\n\n// null场景\nvar none = null;\nconsole.log("定义了一个值为null的变量：" + none);\n\n\n// undefined 的场景\nvar i;\nconsole.log("定义变量但未赋值的值为:" + i)\nf1();\nconsole.log("没有返回值的方法，默认返回：" + f2());\n\nfunction f1(x) {\n    console.log(\'定义方法，但未传入要入的参数，那这个参数的值为：\' + x)\n}\n\nfunction f2() {\n}\n')])])])])]),n._v(" "),a("h4",{attrs:{id:"引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[n._v("#")]),n._v(" 引用类型")]),n._v(" "),a("ul",[a("li",[n._v("数组")]),n._v(" "),a("li",[n._v("object\t\t对象类型：内置对象，自定义对象")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 5. 引用数据类型\n\n//5. 1 数组\n\nvar arrs = [1, 2, 'domain', 'alex'];\n\nconsole.log('定义数组：' + arrs)\n\n//5. 2 对象\nvar info = {\n    name: 'domain',\n    age: 18,\n    'sex': '男'\n}\n\nconsole.log('定义了一个对象:' + JSON.stringify(info))\n\n\nconsole.log('获取对象中的name:' + info['name'])\ninfo['name'] = 'alex';\nconsole.log('修改对象中的name:' + info['name'])\ndelete info['name'];\nconsole.log('删除对象中的name:' + JSON.stringify(info))\n\n//新增\ninfo['avatar'] = '头像';\nconsole.log('往对象中新增了头像字段:' + JSON.stringify(info))\n")])])]),a("h2",{attrs:{id:"比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[n._v("#")]),n._v(" 比较运算符")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("在js中进行比较时，需要注意：\n    ==       比较值相等\n    !=       不等于\n    ===      比较值和类型相等\n    !===     不等于\n    ||        或\n    &&        且\n*/\n")])])]),a("h2",{attrs:{id:"条件判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件判断"}},[n._v("#")]),n._v(" 条件判断")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 条件判断， if else ， switch， 和java 一样\n\nvar n1 = 1;\n\nif (n1 === 1) {\n    console.log("进入if的判断")\n} else {\n    console.log("进入else的判断")\n\n}\n\nswitch (n1) {\n    case 1:\n        console.log("进入switch的判断")\n        break\n\n    default:\n        console.log("进入default判断")\n        break\n}\n')])])]),a("h2",{attrs:{id:"遍历循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历循环"}},[n._v("#")]),n._v(" 遍历循环")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// ## 循环 ， 也和java一样\nvar arr3 = ["domain", "alex", "joy"]\nfor (var j = 0; j < arr3.length; j++) {\n    console.log("遍历下标和值：" + j + arr3[j]);\n}\n\n// 循环下标\nfor (var value in arr3) {\n    console.log(\'遍历下标:\' + value)\n}\n\n//循环值\nfor (var value of arr3) {\n    console.log(\'遍历值:\' + value)\n}\n')])])]),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[n._v("#")]),n._v(" 函数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// ##函数\n\n\n// 无参函数\nfunction f1() {\n    console.log('执行无参方法');\n}\n\nfunction f2(x) {\n    console.log('执行有参方法:' + x);\n}\n\nfunction f3(x) {\n    console.log('执行无返回值方法')\n}\n\nfunction f4(x) {\n    console.log('执行有返回值方法')\n    return x + 1;\n}\n\n\nf1();\nf2();\nconsole.log(f3(1));\nconsole.log(f4(1));\n\n\n//匿名函数, f5方法接受一个参数， 把一个匿名方法作为参数传入， 然后执行传进来的这个方法。\nfunction f5(x) {\n    x();\n}\n\n\nf5(\n    function () {\n        console.log('我是匿名函数的执行体')\n    }\n);\n\n\n//自执行函数， 自动触发执行\n\n(function (x){\n    console.log('执行自执行函数:'+x);\n})('domain');\n\n\n// 闭包， 嵌套函数， 函数中嵌套了一个函数，并且返回嵌套的这个函数，这个函数操作的外层函数的变量并返回。\nvar add = (function () {\n    var counter = 0;\n    return function () {return counter += 1;}\n})();\n\n\n\n\nconsole.log(\"闭包调用：\"+add());\nconsole.log(\"闭包调用：\"+add());\nconsole.log(\"闭包调用：\"+add());\n\n")])])]),a("h2",{attrs:{id:"序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序列化"}},[n._v("#")]),n._v(" 序列化")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//## 序列化\n\nvar user = {\n    name:\'domain\',\n    age:18,\n    sex:"男"\n}\n\nvar userJsonStr = JSON.stringify(user);\nconsole.log("json序列化："+userJsonStr);\n\nvar user2 = JSON.parse(userJsonStr);\n\nconsole.log("json 反序列化："+user2[\'name\']);\n\n')])])]),a("h2",{attrs:{id:"this关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this关键字"}},[n._v("#")]),n._v(" this关键字")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// ## this, this就是返回当前对象， 在最外层的this， 是windows对象， object中的this就是当前这个object， 类中的this就这个类对象。\n\nvar t = this;\nconsole.log(\"外层的this：\"+this);\n\nfunction fun(){\n    console.log('方法中的this:'+this);\n}\n\nfunction  f1(){\n   return  function (){\n        console.log('嵌套方法中的this:'+this);\n    };\n};\n\nfun();\nvar f2 = f1();\nf2();\n\n\nvar person = {\n    firstName  : \"John\",\n    lastName   : \"Doe\",\n    id         : 5566,\n    myFunction : function() {\n        return this;\n    }\n};\nconsole.log('object中的this：'+person.myFunction().firstName);\n\n")])])]),a("h2",{attrs:{id:"类定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类定义"}},[n._v("#")]),n._v(" 类定义")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class User{\n\n    constructor(name, url) {\n    this.name = name;\n    this.url = url;\n    this.f = function () {\n        return this;\n    }\n    }\n\n}\n\nvar user = new User('domain','www.baidu.com');\n\nconsole.log('访问类属性：name='+user.name + \"   url=\"+user.url)\nvar u = user.f();\nconsole.log(u.url);\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);